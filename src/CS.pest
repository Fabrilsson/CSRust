WHITESPACE = _{ " " }

using_key_work = {"using"}
namespace_key_work = {"namespace"}
public_key_word = {"public"}
class_key_word = {"class"}
main_key_word = {"main"}
string_key_word = {"string"}
int_key_word = {"int"}
return_key_word = {"return"}
new_key_word = {"new"}
left_parenthesis = {"("}
right_parenthesis = {")"}
left_bracers = {"{"}
right_bracers = {"}"}
semicolon = {";"}
main = {using_code_block* ~ namespace_code_block+}
using_code_block = {using_key_work ~ identifier ~ ("." ~ identifier)* ~ semicolon}
attribute = {"[" ~ identifier ~ (left_parenthesis ~ (string | number) ~ right_parenthesis)? ~ "]"}
namespace_code_block = {namespace_key_work ~ identifier ~ ("." ~ identifier)* ~ left_bracers ~ class_code ~ right_bracers}
if_exp = {"if (" ~ (math_exp | bool_exp)+ ~ ")"}
math_exp = {((number | identifier) ~ math_op ~ (number | identifier))+ ~ (bool_exp)* ~ (math_exp)*}
bool_exp = {(identifier ~ bool_op ~ identifier)+ ~ math_exp* ~ bool_exp*}
number = {(ASCII_DIGIT | "." | "-")+}
string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
identifier = {(ASCII_ALPHA)+ ~ (ASCII_DIGIT | ASCII_ALPHA)*}
math_op = {">" | ">=" | "<" | "<=" | "!=" | "==" | "*"}
bool_op = {"&&" | "||"}
new_instance = {identifier ~ left_parenthesis ~ parameters ~ right_parenthesis ~ semicolon}
code = {if_exp? ~ return_key_word ~ new_key_word? ~ new_instance}
return_type = {"ActionResult" ~ "<" ~ (string_key_word | int_key_word | identifier) ~ ">"}
parameter = {(string | identifier | math_exp)}
parameters = {(parameter ~ (",")?)+}
action_parameter = {(string_key_word | int_key_word | identifier) ~ identifier}
action_parameters = {(action_parameter ~ (",")?)+}
action = {attribute? ~ public_key_word ~ return_type ~ identifier ~ left_parenthesis ~ action_parameters* ~ right_parenthesis ~ left_bracers ~ code ~ right_bracers}
class_code = {attribute* ~ public_key_word ~ class_key_word ~ identifier ~ (":" ~ identifier)? ~ left_bracers ~ action ~ right_bracers}